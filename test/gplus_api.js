// Generated by CoffeeScript 1.4.0
(function() {
  var BATCH_SIZE, GpAPI, IMGOBJ_MULTI, IMGOBJ_PIC_ARRAY_SIZE, IMGOBJ_SINGLE, SPAR_34_MULTI, SPAR_34_SINGLE, albumInfoLength, authuser, baseURL, imageInfoLength, init, openSession, postImage, setCallbacks, spar34Length, sparRequestLength, uploadImage;

  baseURL = "https://plus.google.com";

  authuser = 0;

  sparRequestLength = 45;

  imageInfoLength = 48;

  albumInfoLength = 48;

  spar34Length = 6;

  SPAR_34_MULTI = [250, 38, 35, 1, 0];

  SPAR_34_SINGLE = [249, 18, 1, 0];

  IMGOBJ_MULTI = "27847199";

  IMGOBJ_SINGLE = "27639957";

  IMGOBJ_PIC_ARRAY_SIZE = 14;

  BATCH_SIZE = 2;

  openSession = function(index, batchid) {
    var a, album, callback, fields, fileBlob, fileName, fileSize, requestData, sessionRequestFiled;
    fileName = this.imgList[index].imageName();
    fileBlob = this.imgList[index].toBlob();
    fileSize = fileBlob.size;
    album = this.album;
    callback = this.callbacks['open'];
    batchid = batchid.toString();
    this.currentUpload++;
    sessionRequestFiled = function(obj) {
      var content, name, _results;
      _results = [];
      for (name in obj) {
        content = obj[name];
        _results.push({
          "inlined": {
            "name": name,
            "content": content,
            "contentType": "text/plain"
          }
        });
      }
      return _results;
    };
    fields = [
      {
        "external": {
          "name": "file",
          "filename": fileName,
          "put": {},
          "size": fileSize
        }
      }
    ];
    if ((album != null) && album['albumID'] && album['childCount']) {
      a = {
        "disable_asbe_notification": "true",
        "use_upload_size_pref": "true",
        "title": fileName,
        "addtime": new Date().getTime().toString(),
        "batchid": batchid,
        "album_id": album['albumID'],
        "album_abs_position": (album['childCount'] + index).toString(),
        "client": "es-add-standalone-album"
      };
    } else {
      a = {
        "batchid": batchid,
        "client": "sharebox",
        "disable_asbe_notification": "true",
        "streamid": "updates",
        "use_upload_size_pref": "true",
        "album_abs_position": index.toString()
      };
    }
    requestData = {
      "protocolVersion": "0.8",
      "fields": fields.concat(sessionRequestFiled(a))
    };
    return ajax({
      method: "POST",
      url: baseURL + "/_/upload/photos/resumable?authuser=" + authuser,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded;charset=utf-8",
        "x-guploader-client-info": "mechanism=scotty xhr resumable; clientVersion=42171334"
      },
      onload: function(resp) {
        var obj, uploadURL;
        obj = JSON.parse(resp["responseText"]);
        try {
          uploadURL = obj.sessionStatus.externalFieldTransfers[0].putInfo.url;
          console.log('openSession success');
          if (callback != null) {
            try {
              callback();
            } catch (e) {
              console.log('callback error');
            }
          }
          return this.uploadImage(fileBlob, uploadURL);
        } catch (e) {
          return console.log('openSession error');
        }
      }
    });
  };

  uploadImage = function(fileBlob, uploadURL) {
    var callback;
    callback = this.callbacks['upload'];
    return ajax({
      method: "POST",
      url: uploadURL,
      data: fileBlob,
      onload: function(resp) {
        var obj;
        obj = JSON.parse(resp);
        if (obj["errorMessage"] != null) {
          console.log(obj["errorMessage"]["additionalInfo"]["uploader_service.GoogleRupioAdditionalInfo"]["requestRejectedInfo"]["reasonDescription"]);
        } else {
          console.log('upload success');
          if (callback != null) {
            try {
              callback();
            } catch (e) {
              console.log('callback error');
            }
          }
          this.customerInfo.push(obj["sessionStatus"]["additionalInfo"]["uploader_service.GoogleRupioAdditionalInfo"]["completionInfo"]["customerSpecificInfo"]);
        }
        return this.currentUpload--;
      }
    });
  };

  postImage = function(postOption) {
    var albumID, albumInfo, albumUrl, buffer, c, callback, height, image, imgObj, imgObjPics, imgs, info, m, newNullArray, photoID, photoPageUrl, reqid, spam, spar, tempArray, title, url, width, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1,
      _this = this;
    callback = this.callbacks['post'];
    newNullArray = function(length) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
        _results.push(null);
      }
      return _results;
    };
    imgObjPics = function(isAlbum, isMulti) {
      var albumID, height, image, info, photoID, photoPageUrl, temp, title, url, width, _i, _len, _ref, _results;
      _ref = _this.customerInfo;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        info = _ref[_i];
        title = info["title"];
        url = info["url"];
        width = info["width"];
        height = info["height"];
        photoPageUrl = info["photoPageUrl"];
        albumID = info["albumid"];
        photoID = info["photoid"];
        image = newNullArray(IMGOBJ_PIC_ARRAY_SIZE);
        temp = newNullArray(9);
        temp[0] = url;
        temp[1] = width;
        temp[2] = height;
        temp[7] = height;
        temp[8] = [1, url];
        if (isAlbum) {
          temp[8][0] = 0;
        } else if (isMulti) {
          temp[3] = 1;
          temp[4] = 1;
        }
        image[0] = [photoPageUrl, title, "", url, null, temp, null, width.toString(), height.toString(), width, height, null, 'picasaweb.google.com'];
        image[1] = userID;
        image[3] = photoID;
        image[6] = url;
        if (isAlbum || isMulti) {
          image[7] = photoPageUrl;
        }
        image[9] = photoPageUrl;
        image[11] = "albumid=" + albumID + "&photoid=" + photoID;
        image[12] = 1;
        image[13] = [];
        _results.push(image);
      }
      return _results;
    };
    imgs = (function() {
      var _i, _len, _ref, _results;
      _ref = this.customerInfo;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        info = _ref[_i];
        title = info["title"];
        url = info["url"];
        width = info["width"];
        height = info["height"];
        photoPageUrl = info["photoPageUrl"];
        albumID = info["albumid"];
        photoID = info["photoid"];
        image = newNullArray(imageInfoLength);
        image[3] = '';
        image[5] = [null, url, width, height];
        image[9] = [];
        image[21] = title;
        image[24] = [null, photoPageUrl, null, "image/jpeg", "image"];
        image[41] = [];
        image[41][0] = [null, url, width, height];
        image[47] = [];
        image[47][0] = [null, "picasa", "http://google.com/profiles/media/provider", ""];
        _results.push(image[47][1] = [albumID, photoID, photoPageUrl]);
      }
      return _results;
    }).call(this);
    spar = newNullArray(sparRequestLength);
    spar[0] = postOption['comment'];
    spar[1] = "oz:" + postOption['userID'] + "." + (new Date().getTime().toString(16)) + ".0";
    spar[3] = this.album != null ? this.album['albumID'] : this.customerInfo[0]['albumid'];
    spar[9] = true;
    spar[10] = (function() {
      var _i, _len, _ref, _results;
      _ref = postOption['mention'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        _results.push([null, m]);
      }
      return _results;
    })();
    spar[14] = spar[36] = [];
    spar[11] = spar[16] = false;
    spar[19] = postOption['userID'];
    spar[27] = postOption['disableComment'];
    spar[28] = postOption['lockPost'];
    spar[34] = newNullArray(spar34Length);
    spar[37] = [[], null];
    _ref = postOption['circle'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      spar[37][0].push([null, c]);
    }
    _ref1 = postOption['mention'];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      m = _ref1[_j];
      spar[37][0].push([null, null, m]);
    }
    spar[44] = "!A0JoSBi6oOwwzERUO9imjc2DBAIAAAB-UgAAABwq1gEi";
    if ((this.album != null) && (this.album['albumName'] != null)) {
      albumUrl = "https://plus.google.com/photos/" + UserID + "/albums/" + this.album['albumID'];
      albumInfo = newNullArray(albumInfoLength);
      albumInfo[3] = this.album['albumName'];
      albumInfo[9] = [];
      albumInfo[24] = [null, albumUrl, null, "text/html", "document"];
      albumInfo[41] = [];
      albumInfo[47] = [];
      albumInfo[47][0] = [null, "picasa", "http://google.com/profiles/media/provider", ""];
      albumInfo[47][1] = [null, "0", "http://google.com/profiles/media/additional_metadata", "album_summary_type"];
      for (_k = 0, _len2 = imgs.length; _k < _len2; _k++) {
        image = imgs[_k];
        buffer = image[47][1];
        image[47][1] = [null, buffer[2], "http://google.com/profiles/media/container", ""];
        image[47][2] = [null, "albumid=" + buffer[0] + "&photoid=" + buffer[1], "http://google.com/profiles/media/onepick_media_id", ""];
      }
      spar[6] = JSON.stringify(albumInfo.concat(imgs));
      spar[16] = spar[32] = true;
      spar[29] = false;
      spar[34][0] = SPAR_34_MULTI;
      imgObj = {};
      tempArray = newNullArray(11);
      tempArray[0] = albumUrl;
      tempArray[1] = this.album['albumName'];
      tempArray[3] = imgObjPics(true);
      tempArray[4] = userID;
      tempArray[5] = this.album['albumID'];
      tempArray[8] = 0;
      tempArray[10] = "photos/" + UserID + "/albums/" + this.album['albumID'];
      imgObj[IMGOBJ_MULTI] = tempArray;
    } else {
      for (_l = 0, _len3 = imgs.length; _l < _len3; _l++) {
        image = imgs[_l];
        image[41][1] = image[41][0];
        buffer = image[47][1];
        image[47][1] = [null, "albumid=" + buffer[0] + "&photoid=" + buffer[1], "http://google.com/profiles/media/onepick_media_id", ""];
      }
      spar[6] = JSON.stringify(imgs);
      spar[29] = true;
      if (imgs.length > 1) {
        spar[34][0] = SPAR_34_MULTI;
        imgObj = {};
        tempArray = newNullArray(9);
        tempArray[3] = imgObjPics(false, true);
        tempArray[4] = userID;
        tempArray[8] = 0;
        imgObj[IMGOBJ_MULTI] = tempArray;
      } else {
        spar[34][0] = SPAR_34_SINGLE;
        imgObj = {};
        imgObj[IMGOBJ_SINGLE] = imgObjPics[0];
      }
    }
    spar[34][spar34Length(-1)] = imgObj;
    spam = this.album != null ? 24 : 20;
    reqid = +new Date() % 10000000;
    return ajax({
      method: 'POST',
      url: "" + baseURL + "/_/sharebox/post/?spam=" + spam + "&rt=j&_reqid=" + reqid,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded;charset=utf-8"
      },
      data: 'f.req=' + (encodeURIComponent(JSON.stringify(spar))) + ("&at=" + sessionID),
      onload: function() {
        if (callback != null) {
          try {
            return callback();
          } catch (e) {
            return console.log('callback error');
          }
        }
      }
    });
  };

  init = function() {
    var batchid, i, interval, uploadedAll, wait, _i, _len, _ref;
    batchid = +new Date();
    _ref = this.imgList.length;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      while (this.currentUpload > BATCH_SIZE) {
        true;
      }
      this.openSession(i, batchid);
    }
    uploadedAll = function() {
      if (this.imgList.length === this.customerInfo.length) {
        clearInterval(wait);
        if (callbacks['ready'] != null) {
          return callbacks['ready']();
        }
      }
    };
    interval = (this.imgList[0].toBlob().size * this.imgList.length) >> 8;
    return wait = setInterval(uploadedAll, interval);
  };

  setCallbacks = function(callbacks) {
    var cb, cbList, _i, _len, _results;
    if (callbacks == null) {
      callbacks = {};
    }
    cbList = ['open', 'upload', 'ready', 'post'];
    if (typeof callbacks === "object") {
      _results = [];
      for (_i = 0, _len = cbList.length; _i < _len; _i++) {
        cb = cbList[_i];
        _results.push(this.callbacks[cb] = callbacks[cb]);
      }
      return _results;
    }
  };

  GpAPI = function(imgList, album) {
    if (album == null) {
      album = null;
    }
    if (imgList == null) {
      console.log('no Pics!');
      return false;
    }
    this.imgList = imgList;
    this.album = album;
    this.customerInfo = [];
    this.currentUpload = 0;
    this.setCallbacks();
    return this;
  };

  GpAPI.prototype.openSession = openSession;

  GpAPI.prototype.uploadImage = uploadImage;

  GpAPI.prototype.postImage = postImage;

  GpAPI.prototype.setCallbacks = setCallbacks;

  GpAPI.prototype.init = init;

  arguments[0].GpAPI = GpAPI;

}).call(this);
