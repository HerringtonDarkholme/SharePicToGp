// Generated by CoffeeScript 1.4.0
(function() {
  var addListener, ajax, albumsURL, authuser, baseURL, clickHandler, communityDetailURL, communityURL, context, dumps, getAlbum, getCircle, getCommunities, getCommunityDetails, getKeys, getMentionList, init, mentionListURL, parseGdata, rmvListener, shareBoxURL, socialGraphURL, update, user, userInfo, w, xhr_compatible,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  context = arguments[0] || window;

  w = window;

  addListener = w.addEventListener != null ? 'addEventListener' : 'attachEvent';

  rmvListener = w.removeEventListener != null ? 'removeEventListener' : 'detachEvent';

  xhr_compatible = function() {
    if (w.XMLHttpRequest != null) {
      return new XMLHttpRequest();
    } else {
      try {
        return new ActiveXObject('Msxml2.XMLHTTP.6.0');
      } catch (e) {

      }
      try {
        return new ActiveXObject('Msxml2.XMLHTTP.3.0');
      } catch (e) {

      }
      try {
        return new ActiveXObject('Microsoft.XMLHTTP');
      } catch (e) {
        throw new Error("Your browser is in great SECURITY DANGER! Please Install Chrome for better SECURITY and PERFORMANCE");
      }
    }
  };

  ajax = function(options) {
    var async, data, header, method, prog, url, value, xhr, _i, _len, _ref, _ref1;
    if (!(options != null) && !options['url']) {
      console.log("no proper arguments!");
      return false;
    }
    url = options['url'];
    data = options['data'] != null ? options['data'] : null;
    method = options['method'] != null ? options['method'] : (data == null ? 'GET' : 'POST');
    async = options['async'] != null ? options['async'] : true;
    xhr = xhr_compatible();
    xhr.open(method, url, async);
    if (options['headers'] != null) {
      console.log('header');
      _ref = options['headers'];
      for (header in _ref) {
        value = _ref[header];
        console.log("" + header + " : " + value);
        try {
          xhr.setRequestHeader(header, value);
        } catch (e) {
          console.log("cannot set " + header + " to " + value);
          return false;
        }
      }
    }
    if (options['before'] != null) {
      try {
        options['before'](xhr);
      } catch (e) {
        console.log('error at execute beforeSend');
        return false;
      }
    }
    _ref1 = ['onload', 'onerror', 'onprogress'];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      prog = _ref1[_i];
      if (options[prog] != null) {
        xhr[prog] = (function() {
          var active;
          active = prog;
          return function(progressEvent) {
            return options[active](xhr, progressEvent);
          };
        })();
      }
    }
    xhr.onreadystatechanges = function() {
      var _ref2, _ref3;
      if (xhr.readyState === 4 && ((200 <= (_ref2 = xhr.status) && _ref2 < 300) || xhr.status === 304)) {
        try {
          if (options['onload'] != null) {
            options['onload'](xhr);
          }
        } catch (e) {
          console.log("onload handler error");
          return false;
        }
      }
      if (xhr.readyState === 4 && xhr.status >= 400) {
        try {
          if (options['error'] != null) {
            options['error'](xhr);
          }
        } catch (e) {
          console.log("error handler error");
          return false;
        }
      }
      console.log('progress cannot be mocked by xhr');
      if (options['spec'] != null) {
        if (_ref3 = '' + xhr.status, __indexOf.call(options['spec'], _ref3) >= 0) {
          try {
            return options['spec'](xhr);
          } catch (e) {
            console.log('spec error');
            return false;
          }
        }
      }
    };
    return xhr.send(data);
  };

  context.ajax = ajax;

  /*
  test =
      url     : 'http://www.baidu.com' #no relative path
      #method  : 'GET'
      before  : -> console.log 'before'
      headers :
          'content-type' : 'application/x-www-form-urlencoded;charset=UTF-8' #set data to form data
      onload  : -> console.log 'success'
      onerror : -> console.log 'error'
      onprogress : -> console.log 'working'
      data    :  'take it boy'
  
  ajax test
  */


  context = arguments[0] || window;

  authuser = 0;

  baseURL = "https://plus.google.com";

  shareBoxURL = "" + baseURL + "/u/" + authuser + "/_/sharebox/dialog";

  socialGraphURL = "" + baseURL + "/u/" + authuser + "/_/socialgraph/lookup/circles/";

  mentionListURL = socialGraphURL + "?m=true";

  albumsURL = "" + baseURL + "/_/photos/albums/";

  communityURL = "" + baseURL + "/u/" + authuser + "/_/communities/getcommunities?rt=j&_reqid=" + (+new Date() % 10000000);

  communityDetailURL = communityURL.replace(/getcommunities/, 'getcommunity');

  parseGdata = function(text) {
    text = (text.split(")]}'"))[1];
    text = text.replace(/\n/g, '');
    while (/,,/.test(text)) {
      text = text.replace(/,,/g, ',null,');
    }
    while (/\[,/.test(text)) {
      text = text.replace(/\[,/g, '[null,');
    }
    while (/,\]/.test(text)) {
      text = text.replace(/,\]/g, ',null]');
    }
    return JSON.parse(text);
  };

  getKeys = function(obj) {
    var key, _results;
    _results = [];
    for (key in obj) {
      _results.push(key);
    }
    return _results;
  };

  init = function(callback) {
    var self;
    self = this;
    return ajax({
      method: "GET",
      url: shareBoxURL,
      async: false,
      onload: function(resp) {
        var responseText;
        try {
          responseText = resp['responseText'];
          console.log(resp.status);
          self.userID = (/plus\.google\.com\/(\d+)/.exec(responseText))[1];
          self.sessionID = (/AObGSA.*:\d+/.exec(responseText))[0];
          if (callback != null) {
            return callback(self);
          }
        } catch (e) {
          console.log(e);
          return console.log('Error! try signing in?');
        }
      }
    });
  };

  getCircle = function(callback, retry) {
    var self;
    if (retry == null) {
      retry = 1;
    }
    if (retry < 0) {
      console.log('Unable to Info!');
      return false;
    }
    self = this;
    return ajax({
      method: "GET",
      url: socialGraphURL,
      onload: function(resp) {
        var c, circles, _i, _len, _ref;
        try {
          circles = parseGdata(resp['responseText']);
          _ref = circles[0][1];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            self.circleInfo[c[0][0]] = c[1][0];
          }
          if (callback != null) {
            return callback(self);
          }
        } catch (e) {
          self.init(function() {
            return self.getCircle(callback, retry - 1);
          });
          return console.log('Error in loading circles');
        }
      }
    });
  };

  getAlbum = function(callback, retry) {
    var makeAlbumInfo, self;
    if (retry == null) {
      retry = 1;
    }
    if (retry < 0) {
      console.log('Unable to Info!');
      return false;
    }
    makeAlbumInfo = function(list) {
      if (Object.prototype.toString.call(list) === '[object Array]') {
        try {
          return {
            albumName: list[2],
            albumSummary: list[3],
            childCount: list[4],
            albumID: list[5],
            albumsUrl: list[8]
          };
        } catch (e) {
          return console.log('malformed array');
        }
      } else {
        return console.log('non Array input');
      }
    };
    self = this;
    if (this.userID.length === 0) {
      console.log('Please get userID first!');
      self.init(function() {
        return self.getAlbum(callback, retry - 1);
      });
      return false;
    } else {
      return ajax({
        method: "GET",
        url: albumsURL + self.userID,
        onload: function(resp) {
          var a, albums, createdAlbum, _i, _len;
          try {
            albums = (parseGdata(resp['responseText']))[0];
            createdAlbum = albums[2];
            for (_i = 0, _len = createdAlbum.length; _i < _len; _i++) {
              a = createdAlbum[_i];
              self.albumInfo.push(makeAlbumInfo(a));
            }
            if (callback != null) {
              return callback(self);
            }
          } catch (e) {
            self.init(function() {
              return self.getAlbum(callback, retry - 1);
            });
            return console.log('error in launch');
          }
        }
      });
    }
  };

  getCommunities = function(callback, retry) {
    var self;
    if (retry == null) {
      retry = 1;
    }
    if (retry < 0) {
      console.log('Unable to Info!');
      return false;
    }
    if (this.sessionID.length === 0) {
      console.log('Please sign in first');
      self = this;
      self.init(function() {
        return self.getCommunities(callback, retry - 1);
      });
      return false;
    } else {
      self = this;
      return ajax({
        method: "POST",
        url: communityURL,
        headers: {
          "Content-Type": "application/x-www-form-urlencoded;charset=utf-8"
        },
        data: 'f.req=' + (encodeURIComponent("[[1]]")) + ("&at=" + (encodeURIComponent(self.sessionID)) + "&"),
        onload: function(resp) {
          var c, communities, community, communityID, communityName, _i, _len;
          try {
            communities = (parseGdata(resp['responseText']))[0][1][2];
            for (_i = 0, _len = communities.length; _i < _len; _i++) {
              c = communities[_i];
              community = c[0][0];
              communityID = community[0];
              communityName = community[1][0];
              self.communityInfo[communityID] = communityName;
            }
            if (callback != null) {
              return callback(self);
            }
          } catch (e) {
            self.init(function() {
              return self.getCommunities(callback, retry - 1);
            });
            return console.log("error in launch");
          }
        }
      });
    }
  };

  getCommunityDetails = function(communityID, callback, retry) {
    var communityDetails, self;
    if (retry == null) {
      retry = 1;
    }
    if (retry < 0) {
      console.log('Unable to Info!');
      return false;
    }
    if (this.sessionID.length === 0) {
      console.log('Please sign in first');
      self = this;
      self.init(function() {
        return self.getCommunityDetails(communityID, callback, retry - 1);
      });
      return false;
    } else {
      self = this;
      communityDetails = {};
      ajax({
        method: "POST",
        url: communityDetailURL,
        async: false,
        headers: {
          "Content-Type": "application/x-www-form-urlencoded;charset=utf-8"
        },
        data: 'f.req=' + (encodeURIComponent("[\"" + communityID + "\",false]")) + ("&at=" + (encodeURIComponent(self.sessionID)) + "&"),
        onload: function(resp) {
          var c, categories, categoryID, categoryName, _i, _len, _results;
          try {
            categories = (parseGdata(resp['responseText']))[0][1][1][2][0];
            _results = [];
            for (_i = 0, _len = categories.length; _i < _len; _i++) {
              c = categories[_i];
              categoryID = c[0];
              categoryName = c[1];
              _results.push(communityDetails[categoryID] = categoryName);
            }
            return _results;
          } catch (e) {
            self.init(function() {
              return self.getCommunityDetails(communityID, callback, retry - 1);
            });
            return console.log("error in launch");
          }
        }
      });
      return communityDetails;
    }
  };

  dumps = function() {
    return {
      userID: this.userID,
      sessionID: this.sessionID,
      circleInfo: this.circleInfo,
      albumInfo: this.albumInfo,
      communityInfo: this.communityInfo
    };
  };

  update = function(obj) {
    var key, _i, _len, _ref, _results;
    if (obj != null) {
      _ref = ['userID', 'sessionID', 'circleInfo', 'albumInfo', 'communityInfo'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        if (obj[key] != null) {
          _results.push(this[key] = obj[key]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    } else {
      console.log('no info provided!');
      return false;
    }
  };

  getMentionList = function() {};

  userInfo = function() {
    this.userID = '';
    this.sessionID = '';
    this.circleInfo = {};
    this.albumInfo = [];
    this.communityInfo = {};
    return this;
  };

  userInfo.prototype.init = init;

  userInfo.prototype.getCircle = getCircle;

  userInfo.prototype.getAlbum = getAlbum;

  userInfo.prototype.getCommunities = getCommunities;

  userInfo.prototype.getCommunityDetails = getCommunityDetails;

  userInfo.prototype.dumps = dumps;

  userInfo.prototype.update = update;

  context.userInfo = userInfo;

  user = new userInfo();

  user.getAlbum();

  /*
  execScripts = (tab, scripts, callback, cbs) ->
      try
          if cbs?
              for scr in scripts[...]
                  if cbs[scr]?
                      chrome.tabs.execScripts tab, {file : scr}, cbs[scr]
                  else
                      chrome.tabs.execScripts tab, {file : scr}
          else
              for scr in scripts[...]
                  chrome.tabs.execScripts tab, {file : scr}
          if callback? then chrome.tabs.execScripts tab, {file : scripts[scripts.length-1]}, callback
          else then p
          return true
      catch e
          console.log 'execScripts error'
          return false
  */


  clickHandler = function(info, tab) {
    var currentUser, lastSelected, sendExecute, storedTabs, storedUsers, updateLastSelected, _ref;
    storedUsers = JSON.parse(localStorage['GpicUsers']);
    storedTabs = JSON.parse(localStorage['GpicTabs']);
    lastSelected = JSON.parse(localStorage['GpicLastSelected']);
    currentUser = null;
    updateLastSelected = function(resp) {
      if ((resp != null) && (resp['selectedCircles'] != null)) {
        lastSelected[0] = resp['selectedCircles'];
        return localStorage['GpicLastSelected'] = JSON.stringify(lastSelected);
      }
    };
    sendExecute = function() {
      return chrome.tabs.sendMessage(tab.id, {
        status: 'injection success',
        todo: 'execute',
        target: info.srcUrl,
        user: currentUser,
        lastSelected: lastSelected[0]
      }, updateLastSelected);
    };
    if (storedUsers.length === 0) {
      user = new userInfo();
      return user.init(function() {
        return user.getCircle(function() {
          var _ref;
          storedUsers.push(user.dumps());
          localStorage['GpicUsers'] = JSON.stringify(storedUsers);
          currentUser = storedUsers[0];
          if (_ref = tab.id, __indexOf.call(storedTabs, _ref) < 0) {
            chrome.tabs.insertCSS(tab.id, {
              file: 'Gpic.css'
            }, function() {
              console.log('insertedCSS!');
              return chrome.tabs.executeScript(tab.id, {
                file: 'test.js'
              }, sendExecute);
            });
            storedTabs.push(tab.id);
            return localStorage['GpicTabs'] = JSON.stringify(storedTabs);
          } else {
            currentUser = storedUsers[0];
            return sendExecute();
          }
        });
      });
    } else {
      currentUser = storedUsers[0];
      if (_ref = tab.id, __indexOf.call(storedTabs, _ref) < 0) {
        return chrome.tabs.insertCSS(tab.id, {
          file: 'Gpic.css'
        }, function() {
          chrome.tabs.executeScript(tab.id, {
            file: 'test.js'
          }, sendExecute);
          storedTabs.push(tab.id);
          return localStorage['GpicTabs'] = JSON.stringify(storedTabs);
        });
      } else {
        currentUser = storedUsers[0];
        return sendExecute();
      }
    }
  };

  chrome.contextMenus.onClicked.addListener(clickHandler);

  chrome.extension.onMessage.addListener(function(message, sender, sendResponse) {
    var storedTabs, _ref;
    console.log('accpet message!');
    if ((message != null) && message['unload']) {
      console.log('one Tab unloaded');
      storedTabs = JSON.parse(localStorage['GpicTabs']);
      if (_ref = sender.tab.id, __indexOf.call(storedTabs, _ref) >= 0) {
        storedTabs.pop(sender.tab.id);
      }
      return localStorage['GpicTabs'] = JSON.stringify(storedTabs);
    }
  });

  chrome.runtime.onInstalled.addListener(function() {
    chrome.contextMenus.create({
      type: "normal",
      id: "Gpic",
      title: "Share to G+",
      contexts: ["image"],
      documentUrlPatterns: ["\u003Call_urls\u003E"]
    });
    localStorage['GpicUsers'] = JSON.stringify([]);
    localStorage['GpicTabs'] = JSON.stringify([]);
    return localStorage['GpicLastSelected'] = JSON.stringify([]);
  });

}).call(this);
