// Generated by CoffeeScript 1.4.0
(function() {
  var addListener, ajax, context, rmvListener, test, w, xhr_compatible,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  context = arguments[0] || window;

  w = window;

  addListener = w.addEventListener != null ? w.addEventListener : w.attachEvent;

  rmvListener = w.removeEventListener != null ? w.removeEventListener : w.detachEvent;

  xhr_compatible = function() {
    if (w.XMLHttpRequest != null) {
      return new XMLHttpRequest();
    } else {
      try {
        return new ActiveXObject('Msxml2.XMLHTTP.6.0');
      } catch (e) {

      }
      try {
        return new ActiveXObject('Msxml2.XMLHTTP.3.0');
      } catch (e) {

      }
      try {
        return new ActiveXObject('Microsoft.XMLHTTP');
      } catch (e) {
        throw new Error("Your browser is in great SECURITY DANGER! Please Install Chrome for better SECURITY and PERFORMANCE");
      }
    }
  };

  ajax = function(options) {
    var async, data, header, method, prog, url, value, xhr, _i, _len, _ref, _ref1;
    if (!(options != null) && !options['url']) {
      console.log("no proper arguments!");
      return false;
    }
    url = options['url'];
    data = options['data'] != null ? options['data'] : null;
    method = options['method'] != null ? options['method'] : (data == null ? 'GET' : 'POST');
    async = options['async'] != null ? options['async'] : false;
    xhr = xhr_compatible();
    xhr.open(method, url, async);
    if (options['headers'] != null) {
      console.log('header');
      _ref = options['headers'];
      for (header in _ref) {
        value = _ref[header];
        console.log("" + header + " : " + value);
        try {
          xhr.setRequestHeader(header, value);
        } catch (e) {
          console.log("cannot set " + header + " to " + value);
          return false;
        }
      }
    }
    if (options['before'] != null) {
      try {
        options['before'](xhr);
      } catch (e) {
        console.log('error at execute beforeSend');
        return false;
      }
    }
    _ref1 = ['onload', 'onerror', 'onprogress'];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      prog = _ref1[_i];
      if (options[prog] != null) {
        xhr[prog] = options[prog];
      } else {
        xhr.onreadystatechanges = function() {
          var _ref2, _ref3;
          switch (prog) {
            case "onload":
              if (xhr.readyState === 4 && ((200 <= (_ref2 = xhr.status) && _ref2 < 300) || xhr.status === 304)) {
                try {
                  options[prog](xhr.response, xhr);
                } catch (e) {
                  console.log("" + prog + " handler error");
                  return false;
                }
              }
              break;
            case 'onerror':
              if (xhr.readyState === 4 && xhr.status >= 400) {
                try {
                  options[prog](xhr.response, xhr);
                } catch (e) {
                  console.log("" + prog + " handler error");
                  return false;
                }
              }
              break;
            case 'onprogress':
              console.log('progress cannot be handled');
              return false;
          }
          if (options['spec'] != null) {
            if (_ref3 = '' + xhr.status, __indexOf.call(options['spec'], _ref3) >= 0) {
              try {
                return options['spec'](xhr.response);
              } catch (e) {
                console.log('spec error');
                return false;
              }
            }
          }
        };
      }
    }
    return xhr.send(data);
  };

  context.ajax = ajax;

  test = {
    url: 'http://www.baidu.com',
    before: function() {
      return console.log('before');
    },
    headers: {
      'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'
    },
    onload: function() {
      return console.log('success');
    },
    onerror: function() {
      return console.log('error');
    },
    onprogress: function() {
      return console.log('working');
    },
    data: 'take it boy'
  };

  ajax(test);

}).call(this);
